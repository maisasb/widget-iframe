{"remainingRequest":"/home/track/workplace/a2/frontend/widget/node_modules/babel-loader/lib/index.js!/home/track/workplace/a2/frontend/widget/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/track/workplace/a2/frontend/widget/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/track/workplace/a2/frontend/widget/src/views/Widget/Widget.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/track/workplace/a2/frontend/widget/src/views/Widget/Widget.vue","mtime":1626269920578},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3RyYWNrL3dvcmtwbGFjZS9hMi9mcm9udGVuZC93aWRnZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvaG9tZS90cmFjay93b3JrcGxhY2UvYTIvZnJvbnRlbmQvd2lkZ2V0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwovLwovLwovLwppbXBvcnQgeyBtYXBNdXRhdGlvbnMsIG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCB1c2VJZnJhbWVDb250cm9sIGZyb20gJy4uLy4uL2hvb2tzL2lmcmFtZSc7CmltcG9ydCBCb3ggZnJvbSAnLi9Cb3gnOwppbXBvcnQgV2lkZ2V0VXNlQ2FzZSBmcm9tICcuLi8uLi9hcmNoL3dpZGdldC91c2VjYXNlJzsKdmFyIHdpZGdldFVzZUNhc2UgPSBuZXcgV2lkZ2V0VXNlQ2FzZSgpOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQm94OiBCb3gKICB9LAogIHByb3BzOiB7CiAgICBjb25maWc6IE9iamVjdAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHJlY3VycmVuY2U6IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKHsKICAgIGN1c3RvbWVyOiBmdW5jdGlvbiBjdXN0b21lcihzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUud2lkZ2V0LmN1c3RvbWVyOwogICAgfSwKICAgIHRva2VuOiBmdW5jdGlvbiB0b2tlbihzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUud2lkZ2V0LnRva2VuOwogICAgfSwKICAgIHNob3c6IGZ1bmN0aW9uIHNob3coc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLndpZGdldC5zaG93OwogICAgfSwKICAgIHdpZGdldDogZnVuY3Rpb24gd2lkZ2V0KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS53aWRnZXQud2lkZ2V0OwogICAgfQogIH0pKSwKICBtZXRob2RzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcE11dGF0aW9ucyh7CiAgICBzZXRUb2tlbjogJ3dpZGdldC9zZXRUb2tlbicsCiAgICBzZXRDdXN0b21lcjogJ3dpZGdldC9zZXRDdXN0b21lcicsCiAgICBzaG93V2lkZ2V0OiAnd2lkZ2V0L3Nob3dXaWRnZXQnLAogICAgc2V0RWRpdE1vZGU6ICd3aWRnZXQvc2V0RWRpdE1vZGUnLAogICAgc2V0V2lkZ2V0OiAnd2lkZ2V0L3NldFdpZGdldCcKICB9KSksIHt9LCB7CiAgICBnZXRDdXN0b21lclJlY3VycmVuY2U6IGZ1bmN0aW9uIGdldEN1c3RvbWVyUmVjdXJyZW5jZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHdpZGdldFVzZUNhc2UuY2hlY2tDdXN0b21lclJlY3VycmVuY2UoX3RoaXMudG9rZW4sIF90aGlzLmN1c3RvbWVyKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMucmVjdXJyZW5jZSA9IHJlc3BvbnNlLnF1YXJhbnRpbmU7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRXaWRnZXQ6IGZ1bmN0aW9uIGdldFdpZGdldCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgcmVzcG9uc2UsIHdpZGdldDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCFfdGhpczIucmVjdXJyZW5jZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV2lkZ2V0XSBjdXN0b21lciBpbiByZWN1cnJlbmNlIHJ1bGUnKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHdpZGdldFVzZUNhc2UuZ2V0T25lKF90aGlzMi50b2tlbik7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAvL1JlbW92ZSBub24gcXVlc3Rpb24gaXRlbXMKICAgICAgICAgICAgICAgIHdpZGdldCA9IHdpZGdldFVzZUNhc2UucmVtb3ZlTm9uUXVlc3Rpb25JdGVtcyhyZXNwb25zZSk7CgogICAgICAgICAgICAgICAgX3RoaXMyLnNldFdpZGdldCh3aWRnZXQpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0SWZyYW1lRGF0YTogZnVuY3Rpb24gZ2V0SWZyYW1lRGF0YSgpIHsKICAgICAgdmFyIGlmcmFtZSA9IHVzZUlmcmFtZUNvbnRyb2woKTsKICAgICAgaWZyYW1lLnVwZGF0ZURhdGFMaXN0ZW5lcigpOwogICAgICBpZnJhbWUuZ2V0VG9rZW5LZXkoKTsKICAgIH0sCiAgICBnZXRDb25maWdEYXRhOiBmdW5jdGlvbiBnZXRDb25maWdEYXRhKCkgewogICAgICBpZiAodGhpcy5jb25maWcpIHsKICAgICAgICB0aGlzLnNldFRva2VuKHRoaXMuY29uZmlnLmtleSk7CiAgICAgICAgdGhpcy5zZXRDdXN0b21lcih0aGlzLmNvbmZpZy5jdXN0b21lcik7CiAgICAgICAgdGhpcy5zZXRFZGl0TW9kZSh0aGlzLmNvbmZpZy5lZGl0KTsKICAgICAgfQogICAgfSwKICAgIHNob3dXaWRnZXRCeVVzZXI6IGZ1bmN0aW9uIHNob3dXaWRnZXRCeVVzZXIoKSB7CiAgICAgIHJldHVybiB3aWRnZXRVc2VDYXNlLmNhblNob3codGhpcy53aWRnZXQpOwogICAgfSwKICAgIHNldHVwOiBmdW5jdGlvbiBzZXR1cCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgc2hvdywgZGVsYXksIHZtOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpczMuZ2V0SWZyYW1lRGF0YSgpOyAvL0dldCBkYXRhIGluIGlmcmFtZQoKCiAgICAgICAgICAgICAgICBfdGhpczMuZ2V0Q29uZmlnRGF0YSgpOyAvL0dldCBkYXRhIGluIGNsYXNzIGNvbmZpZwoKCiAgICAgICAgICAgICAgICBpZiAoIV90aGlzMy5jdXN0b21lcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuZ2V0Q3VzdG9tZXJSZWN1cnJlbmNlKCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuZ2V0V2lkZ2V0KCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGlmIChfdGhpczMud2lkZ2V0KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBzaG93ID0gX3RoaXMzLnNob3dXaWRnZXRCeVVzZXIoX3RoaXMzLndpZGdldCk7CgogICAgICAgICAgICAgICAgaWYgKHNob3cpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgZGVsYXkgPSBfdGhpczMud2lkZ2V0LmRlbGF5IHx8IDA7CiAgICAgICAgICAgICAgICB2bSA9IF90aGlzMzsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAvLyBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKQogICAgICAgICAgICAgICAgICB2bS5zaG93V2lkZ2V0KHNob3cpOwogICAgICAgICAgICAgICAgfSwgZGVsYXkgKiAxMDAwKTsKICAgICAgICAgICAgICAgIHdpZGdldFVzZUNhc2Uuc2V0U2hvd0F0KCk7CiAgICAgICAgICAgICAgICB3aWRnZXRVc2VDYXNlLnBvc3RPcGVuQ291bnRlcigpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSksCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuc2V0dXAoKTsKICB9Cn07"},{"version":3,"sources":["Widget.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <Box :widget=\"widget\" v-if=\"widget && show\" />\n</template>\n<script>\nimport { mapMutations, mapState } from 'vuex'\nimport useIframeControl from '../../hooks/iframe'\nimport Box from './Box'\nimport WidgetUseCase from '../../arch/widget/usecase'\nconst widgetUseCase = new WidgetUseCase()\n\nexport default {\n  components: {\n    Box,\n  },\n  props: {\n    config: Object,\n  },\n  data() {\n    return {\n      recurrence: false,\n    }\n  },\n  computed: {\n    ...mapState({\n      customer: state => state.widget.customer,\n      token: state => state.widget.token,\n      show: state => state.widget.show,\n      widget: state => state.widget.widget,\n    }),\n  },\n  methods: {\n    ...mapMutations({\n      setToken: 'widget/setToken',\n      setCustomer: 'widget/setCustomer',\n      showWidget: 'widget/showWidget',\n      setEditMode: 'widget/setEditMode',\n      setWidget: 'widget/setWidget',\n    }),\n    async getCustomerRecurrence() {\n      const response = await widgetUseCase.checkCustomerRecurrence(this.token, this.customer)\n      this.recurrence = response.quarantine\n    },\n    async getWidget() {\n      if (this.recurrence) {\n        console.log('[Widget] customer in recurrence rule')\n        return\n      }\n      const response = await widgetUseCase.getOne(this.token)\n\n      if (!response) {\n        return\n      }\n\n      //Remove non question items\n      const widget = widgetUseCase.removeNonQuestionItems(response)\n\n      this.setWidget(widget)\n    },\n    getIframeData() {\n      const iframe = useIframeControl()\n      iframe.updateDataListener()\n      iframe.getTokenKey()\n    },\n    getConfigData() {\n      if (this.config) {\n        this.setToken(this.config.key)\n        this.setCustomer(this.config.customer)\n        this.setEditMode(this.config.edit)\n      }\n    },\n    showWidgetByUser() {\n      return widgetUseCase.canShow(this.widget)\n    },\n    async setup() {\n      this.getIframeData() //Get data in iframe\n      this.getConfigData() //Get data in class config\n      if (this.customer) {\n        //Check if customer is in recurrence rule\n        await this.getCustomerRecurrence()\n      }\n      await this.getWidget()\n      if (!this.widget) {\n        return\n      }\n      const show = this.showWidgetByUser(this.widget)\n      if (!show) {\n        return\n      }\n\n      const delay = this.widget.delay || 0\n      const vm = this\n      setTimeout(() => {\n        // startTime = new Date().getTime()\n        vm.showWidget(show)\n      }, delay * 1000)\n\n      widgetUseCase.setShowAt()\n      widgetUseCase.postOpenCounter()\n    },\n  },\n  created() {\n    this.setup()\n  },\n}\n</script>\n"],"sourceRoot":"src/views/Widget"}]}