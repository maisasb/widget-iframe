{"remainingRequest":"/home/track/workplace/a2/frontend/widget/node_modules/babel-loader/lib/index.js!/home/track/workplace/a2/frontend/widget/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/track/workplace/a2/frontend/widget/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/track/workplace/a2/frontend/widget/src/views/Widget/Widget.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/track/workplace/a2/frontend/widget/src/views/Widget/Widget.vue","mtime":1620908067435},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/track/workplace/a2/frontend/widget/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3RyYWNrL3dvcmtwbGFjZS9hMi9mcm9udGVuZC93aWRnZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvaG9tZS90cmFjay93b3JrcGxhY2UvYTIvZnJvbnRlbmQvd2lkZ2V0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwovLwovLwovLwppbXBvcnQgeyBtYXBNdXRhdGlvbnMsIG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCB1c2VJZnJhbWVDb250cm9sIGZyb20gJy4uLy4uL2hvb2tzL2lmcmFtZSc7CmltcG9ydCBCb3ggZnJvbSAnLi9Cb3gnOwppbXBvcnQgV2lkZ2V0VXNlQ2FzZSBmcm9tICcuLi8uLi9hcmNoL3dpZGdldC91c2VjYXNlJzsKdmFyIHdpZGdldFVzZUNhc2UgPSBuZXcgV2lkZ2V0VXNlQ2FzZSgpOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQm94OiBCb3gKICB9LAogIHByb3BzOiB7CiAgICBjb25maWc6IE9iamVjdAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHdpZGdldDogbnVsbCwKICAgICAgcmVjdXJyZW5jZTogZmFsc2UKICAgIH07CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZCh7fSwgbWFwU3RhdGUoewogICAgY3VzdG9tZXI6IGZ1bmN0aW9uIGN1c3RvbWVyKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5zdXJ2ZXkuY3VzdG9tZXI7CiAgICB9LAogICAgdG9rZW46IGZ1bmN0aW9uIHRva2VuKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5zdXJ2ZXkudG9rZW47CiAgICB9LAogICAgc2hvdzogZnVuY3Rpb24gc2hvdyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuc3VydmV5LnNob3c7CiAgICB9CiAgfSkpLAogIG1ldGhvZHM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwTXV0YXRpb25zKHsKICAgIHNldFRva2VuOiAnc3VydmV5L3NldFRva2VuJywKICAgIHNldEN1c3RvbWVyOiAnc3VydmV5L3NldEN1c3RvbWVyJywKICAgIHNob3dXaWRnZXQ6ICdzdXJ2ZXkvc2hvd1dpZGdldCcsCiAgICBzZXRFZGl0TW9kZTogJ3N1cnZleS9zZXRFZGl0TW9kZScKICB9KSksIHt9LCB7CiAgICBnZXRDdXN0b21lclJlY3VycmVuY2U6IGZ1bmN0aW9uIGdldEN1c3RvbWVyUmVjdXJyZW5jZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHdpZGdldFVzZUNhc2UuY2hlY2tDdXN0b21lclJlY3VycmVuY2UoX3RoaXMudG9rZW4sIF90aGlzLmN1c3RvbWVyKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMucmVjdXJyZW5jZSA9IHJlc3BvbnNlLnF1YXJhbnRpbmU7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRXaWRnZXQ6IGZ1bmN0aW9uIGdldFdpZGdldCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghX3RoaXMyLnJlY3VycmVuY2UpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1dpZGdldF0gY3VzdG9tZXIgaW4gcmVjdXJyZW5jZSBydWxlJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB3aWRnZXRVc2VDYXNlLmdldE9uZShfdGhpczIudG9rZW4pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMyLndpZGdldCA9IHJlc3BvbnNlOwoKICAgICAgICAgICAgICAgIGlmIChfdGhpczIud2lkZ2V0KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAvL1JlbW92ZSBub24gcXVlc3Rpb24gaXRlbXMKICAgICAgICAgICAgICAgIF90aGlzMi53aWRnZXQgPSB3aWRnZXRVc2VDYXNlLnJlbW92ZU5vblF1ZXN0aW9uSXRlbXMoX3RoaXMyLndpZGdldCk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRJZnJhbWVEYXRhOiBmdW5jdGlvbiBnZXRJZnJhbWVEYXRhKCkgewogICAgICB2YXIgaWZyYW1lID0gdXNlSWZyYW1lQ29udHJvbCgpOwogICAgICBpZnJhbWUudXBkYXRlRGF0YUxpc3RlbmVyKCk7CiAgICAgIGlmcmFtZS5nZXRUb2tlbktleSgpOwogICAgfSwKICAgIGdldENvbmZpZ0RhdGE6IGZ1bmN0aW9uIGdldENvbmZpZ0RhdGEoKSB7CiAgICAgIGlmICh0aGlzLmNvbmZpZykgewogICAgICAgIHRoaXMuc2V0VG9rZW4odGhpcy5jb25maWcua2V5KTsKICAgICAgICB0aGlzLnNldEN1c3RvbWVyKHRoaXMuY29uZmlnLmN1c3RvbWVyKTsKICAgICAgICB0aGlzLnNldEVkaXRNb2RlKHRoaXMuY29uZmlnLmVkaXQpOwogICAgICB9CiAgICB9LAogICAgc2hvd1dpZGdldEJ5VXNlcjogZnVuY3Rpb24gc2hvd1dpZGdldEJ5VXNlcigpIHsKICAgICAgcmV0dXJuIHdpZGdldFVzZUNhc2UuY2FuU2hvdyh0aGlzLndpZGdldCk7CiAgICB9LAogICAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBzaG93LCBkZWxheSwgdm07CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90aGlzMy5nZXRJZnJhbWVEYXRhKCk7IC8vR2V0IGRhdGEgaW4gaWZyYW1lCgoKICAgICAgICAgICAgICAgIF90aGlzMy5nZXRDb25maWdEYXRhKCk7IC8vR2V0IGRhdGEgaW4gY2xhc3MgY29uZmlnCgoKICAgICAgICAgICAgICAgIGlmICghX3RoaXMzLmN1c3RvbWVyKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5nZXRDdXN0b21lclJlY3VycmVuY2UoKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5nZXRXaWRnZXQoKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgaWYgKF90aGlzMy53aWRnZXQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIHNob3cgPSBfdGhpczMuc2hvd1dpZGdldEJ5VXNlcihfdGhpczMud2lkZ2V0KTsKCiAgICAgICAgICAgICAgICBpZiAoc2hvdykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBkZWxheSA9IF90aGlzMy53aWRnZXQuZGVsYXkgfHwgMDsKICAgICAgICAgICAgICAgIHZtID0gX3RoaXMzOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpCiAgICAgICAgICAgICAgICAgIHZtLnNob3dXaWRnZXQoc2hvdyk7CiAgICAgICAgICAgICAgICB9LCBkZWxheSAqIDEwMDApOwogICAgICAgICAgICAgICAgd2lkZ2V0VXNlQ2FzZS5zZXRTaG93QXQoKTsKICAgICAgICAgICAgICAgIHdpZGdldFVzZUNhc2UucG9zdE9wZW5Db3VudGVyKCk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0KICB9KSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5zZXR1cCgpOwogIH0KfTs="},{"version":3,"sources":["Widget.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <Box :widget=\"widget\" v-if=\"widget && show\" />\n</template>\n<script>\nimport { mapMutations, mapState } from 'vuex'\nimport useIframeControl from '../../hooks/iframe'\nimport Box from './Box'\nimport WidgetUseCase from '../../arch/widget/usecase'\nconst widgetUseCase = new WidgetUseCase()\n\nexport default {\n  components: {\n    Box,\n  },\n  props: {\n    config: Object,\n  },\n  data() {\n    return {\n      widget: null,\n      recurrence: false\n    }\n  },\n  computed: {\n    ...mapState({\n      customer: state => state.survey.customer,\n      token: state => state.survey.token,\n      show: state => state.survey.show,\n    }),\n  },\n  methods: {\n    ...mapMutations({\n      setToken: 'survey/setToken',\n      setCustomer: 'survey/setCustomer',\n      showWidget: 'survey/showWidget',\n      setEditMode: 'survey/setEditMode',\n    }),\n    async getCustomerRecurrence(){\n      const response = await widgetUseCase.checkCustomerRecurrence(this.token, this.customer)\n      this.recurrence = response.quarantine\n    },\n    async getWidget() {\n      if (this.recurrence){\n        console.log('[Widget] customer in recurrence rule')\n        return\n      }\n      const response = await widgetUseCase.getOne(this.token)\n      this.widget = response\n\n      if (!this.widget) {\n        return\n      }\n\n      //Remove non question items\n      this.widget = widgetUseCase.removeNonQuestionItems(this.widget)\n    },\n    getIframeData() {\n      const iframe = useIframeControl()\n      iframe.updateDataListener()\n      iframe.getTokenKey()\n    },\n    getConfigData() {\n      if (this.config) {\n        this.setToken(this.config.key)\n        this.setCustomer(this.config.customer)\n        this.setEditMode(this.config.edit)\n      }\n    },\n    showWidgetByUser() {\n      return widgetUseCase.canShow(this.widget)\n    },\n    async setup() {\n      this.getIframeData() //Get data in iframe\n      this.getConfigData() //Get data in class config\n      if (this.customer){//Check if customer is in recurrence rule\n        await this.getCustomerRecurrence()\n      }\n      await this.getWidget()\n      if (!this.widget) {\n        return\n      }\n      const show = this.showWidgetByUser(this.widget)\n      if (!show) {\n        return\n      }\n\n      const delay = this.widget.delay || 0\n      const vm = this\n      setTimeout(() => {\n        // startTime = new Date().getTime()\n        vm.showWidget(show)\n      }, delay * 1000)\n\n      widgetUseCase.setShowAt()\n      widgetUseCase.postOpenCounter()\n    },\n  },\n  created() {\n    this.setup()\n  },\n}\n</script>\n"],"sourceRoot":"src/views/Widget"}]}